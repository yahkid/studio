
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // --- USER SUBMISSIONS ---
    // Allow logged-in users to create documents in these collections.
    // They cannot read, update, or delete others' submissions.
    function canSubmitForm() {
      return request.auth != null;
    }
    
    match /decisions/{decisionId} {
      allow create: if canSubmitForm();
    }
    match /lead_magnet_signups/{signupId} {
      allow create: if canSubmitForm();
    }
    match /visit_requests/{requestId} {
      allow create: if canSubmitForm();
    }
    match /exit_intent_offers/{offerId} {
      allow create: if true; // Allow anonymous submissions for this form
    }
    match /weekly_updates_signups/{signupId} {
      allow create: if true; // Allow anonymous submissions for this form
    }
    match /financial_partner_signups/{signupId} {
       allow create: if canSubmitForm();
    }
    match /prayer_partner_signups/{signupId} {
       allow create: if canSubmitForm();
    }
    match /volunteer_partner_signups/{signupId} {
       allow create: if canSubmitForm();
    }
    
    // User Testimonies: Logged-in users can create. Only admins can read/update later.
    match /user_testimonies/{testimonyId} {
      allow create: if canSubmitForm() && request.resource.data.userId == request.auth.uid;
      // Admins (via backend functions) can read and update status.
      // No client-side read/update access for security.
    }
    
    // --- USER-SPECIFIC DATA ---
    // Users can only access their own course progress documents.
    match /user_course_progress/{progressId} {
      allow read, write: if request.auth.uid == resource.data.user_id;
      allow create: if request.auth.uid == request.resource.data.user_id;
    }

    // --- PUBLIC CONTENT ---
    // These collections are readable by anyone, but not writable from the client.
    // Content should be managed from the Firebase Console or an admin SDK.
    function isPubliclyReadable() {
      return true;
    }
    
    match /leadership/{leaderId} {
      allow read: if isPubliclyReadable();
    }
    
    match /published_testimonials/{testimonialId} {
      allow read: if isPubliclyReadable();
    }

    match /events/{eventId} {
      allow read: if isPubliclyReadable();
    }

    match /courses/{courseId} {
      allow read: if isPubliclyReadable();
    }
    
    match /sermons/{sermonId} {
      allow read: if isPubliclyReadable();
    }
  }
}
