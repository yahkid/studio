
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isStaff() {
      // In a real app, this would check for a custom claim.
      // For now, we allow any authenticated user to act as staff.
      // This is secure because the staff portal pages are route-protected.
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // CONTENT: Public read, staff write
    match /courses/{courseId} {
      allow read: if true;
      allow write: if isStaff();
    }
    match /sermons/{sermonId} {
      allow read: if true;
      allow write: if isStaff();
    }
     match /events/{eventId} {
      allow read: if true;
      allow write: if isStaff();
    }
     match /leadership/{leaderId} {
      allow read: if true;
      allow write: if isStaff();
    }
     match /blog_posts/{postId} {
      allow read: if true;
      allow write: if isStaff();
    }
     match /published_testimonials/{testimonyId} {
      allow read: if true;
      allow write: if isStaff();
    }
    match /resources/{resourceId} {
      allow read: if true;
      allow write: if isStaff();
    }

    // USER DATA: Users can only access their own data. Staff can access all.
    match /user_course_progress/{progressId} {
      allow read, write: if isOwner(resource.data.user_id) || isStaff();
    }
     match /user_testimonies/{testimonyId} {
      allow create: if request.auth != null; // Any signed-in user can submit
      allow read, update, delete: if isStaff(); // Only staff can manage
    }
    
    // SUBMISSIONS: Anyone can submit (write), only staff can read/manage
    match /decisions/{decisionId} {
        allow create: if true;
        allow read, update, delete: if isStaff();
        // Subcollection for contact logs
        match /contact_logs/{logId} {
            allow read, create: if isStaff();
        }
    }
    match /visit_requests/{requestId} {
        allow create: if true;
        allow read, update, delete: if isStaff();
    }
     match /lead_magnet_signups/{signupId} {
        allow create: if true;
        allow read, delete: if isStaff();
    }
    match /donations/{donationId} {
        // Anyone can create a pending donation record
        allow create: if true;
        // The webhook/backend function is what updates the status,
        // so client-side updates should be restricted.
        // Staff can read all donations.
        allow read: if isStaff(); 
        allow update, delete: if isStaff(); // Staff can manage/correct records
    }
    match /community_needs/{needId} {
      // Only staff can read or write community needs
      allow read, write: if isStaff();
    }


    // Writable by any client (for signups)
    // These collections should be monitored for abuse.
    match /weekly_updates_signups/{signupId} {
        allow create: if true;
        allow read, delete: if isStaff();
    }
    match /exit_intent_offers/{offerId} {
        allow create: if true;
        allow read, delete: if isStaff();
    }
     match /prayer_partner_signups/{signupId} {
        allow create: if true;
        allow read, delete: if isStaff();
    }
    match /volunteer_partner_signups/{signupId} {
        allow create: if true;
        allow read, delete: if isStaff();
    }
  }
}
